# Environment variables needed for running in development.  This file
# also serves as the canonical list of ALL environment variables the app
# must have in production.
#
# Each env var should be preceded by a comment explaining its purpose.
# The env var itself can be written in one of two ways:
#
# * Conventionally set a value:
#
#   ```
#   # the API key to interact with the OCP Widgets Service.
#   WIDGETS_API_KEY=some-value
#   ```
#   Ideally, all values are set this way so that everyone is using the same
#   value and the app just works without having to go to an external service
#   to get a real secret for local development.
#
# * Indicates a local override is required:
#
#   ```
#   # the API key to interact with the OCP Widgets Service.
#   LOCAL:WIDGETS_API_KEY
#   ```
#
#   In this form, bin/setup will ask the developer for the value and place
#   it in .env.development.local.  As your app evolves and adds more
#   environment variables, you can add them like this and `bin/setup` will
#   see which ones are present vs missing.

# Session secret used to encrypt the session
SESSION_SECRET=<%= session_secret %>
# URL to the database
DATABASE_URL=postgres://postgres:postgres@postgres:5432/<%= app_id %>_development

# Configures the endpoint where OTel traces are sent.
# In dev and test, it's the otel-desktop-viewer set up in
# docker-compose.dx.yml.  For production, consult your
# OTel vendor's documentation.
OTEL_EXPORTER_OTLP_ENDPOINT="http://otel-desktop-viewer:4318"

# OTel exporter to use for sending traces to the endpoint. You usually
# want otlp, however, in production, consult your vendor's documentation to be sure.
OTEL_TRACES_EXPORTER="otlp"

# OTel exporter protocol. You usually want http/protobuf, however,
# in production, consult your vendor's documentation to be sure.
OTEL_EXPORTER_OTLP_PROTOCOL="http/protobuf"

# This controls the background thread used by the span processor.
# I swear I had to set this to false to make stuff work, however
# various corporate AI chatbots said it should be true for use with
# Puma.  I'm going with my hazy memory for now.
OTEL_RUBY_BSP_START_THREAD_ON_BOOT=false

# OTel log level.  Set this to "debug" to try to figure out why OTel isn't working.
OTEL_LOG_LEVEL=warn

# If set to true, Puma will log its configuration, which is handy to understand
# if what you think you configured actually got configured.
PUMA_LOG_CONFIG=true
