#!/usr/bin/env bash

set -e 

SCRIPT_DIR=$( cd -- "$( dirname -- "${0}" )" > /dev/null 2>&1 && pwd )
PORT="${PORT:-6502}"
RACK_ENV="${RACK_ENV:-development}"

export PORT
export RACK_ENV

declare -A CMD_MAP
declare -A PIDFILE_MAP
declare -A CREATES_PIDFILE_MAP

kill_previous() {
  local pidfile=$1

  if [[ -z "$pidfile" ]]; then
    echo "[ $0 ] Error: no pidfile path given"
    return 0
  fi

  if [ -f "${pidfile}" ]; then
    echo "[ $0 ] pidfile found"
    pid=$(cat "${pidfile}")

    if [[ -z "$pid" || ! "$pid" =~ ^[0-9]+$ ]]; then
      echo "[ $0 ] Invalid or empty PID in $pidfile: '$pid'; removing"
      rm -f "$pidfile"
      return 0
    fi

    if ps -p "${pid}" > /dev/null; then
      echo "[ $0 ] Attempting to kill PID '${pid}'"
      kill "${pid}"
    else
      echo "[ $0 ] PID '${pid}' no longer running"
    fi
    if timeout 5 tail --pid="${pid}" -f /dev/null; then
      echo "[ $0 ] PID '${pid}' stopped. Restarting server"
    else
      echo "[ $0 ] PID '${pid}' has not stopped. Trying kill -9"
      kill -9 "${pid}"
      if timeout 1 tail --pid="${pid}" -f /dev/null; then
        echo "[ $0 ] PID '${pid}' killed. Restarting server"
      else
        echo "[ $0 ] PID '${pid}' still running. Something seriously wrong"
      fi
      exit 1
    fi

  else
    echo "[ $0 ] No pidfile-Starting up"
  fi
}

dotenv_run() {
  local env_files="${SCRIPT_DIR}/../.env.${RACK_ENV}.local,${SCRIPT_DIR}/../.env.${RACK_ENV}"
  dotenv -f "$env_files" --ignore -- "$@"
}


for f in "$SCRIPT_DIR"/run.*; do
  if [[ -f "$f" ]]; then
    echo "[ $0 ] Sourcing $f"
    . "$f"
  fi
done

case $# in
  0) name="run" ;;
  1) name="$1" ;;
  *) echo "Error: too many arguments ($#)." >&2; usage; exit 2 ;;
esac

if [[ ! -v CMD_MAP[$name] ]]; then
  echo "[ $0 ] Error: unknown service '$name'." >&2
  echo -n "[ $0 ] Known services: " >&2
  printf "%s " "${!CMD_MAP[@]}" >&2
  echo >&2
  exit 1
fi

cmd="${CMD_MAP[$name]}"
creates_pidfile="${CREATES_PIDFILE_MAP[$name]:-false}"
pidfile="${PIDFILE_MAP[$name]:-}"

echo "[ $0 ]: Command for $name:"
echo
echo "          $cmd"
echo

kill_previous "$pidfile"

if [[ "$creates_pidfile" == true ]]; then
  echo "[ $0 ] Running '$cmd', which creates its own pidfile"
  eval "dotenv_run $cmd"
else
  # Command wont' create a pidfile, so we will
  if [[ -z "${pidfile:-}" ]]; then
    echo "Error: no pidfile path configured for '$name' but creates_pidfile=false." >&2
    exit 1
  fi
  echo "[ $0 ] Running '$cmd', which will not create a pidfile"
  echo "[ $0 ] We will do that and save it to ${pidfile}"

  echo "[ $0 ] Ensuring $(dirname "$pidfile") exists"
  mkdir -p "$(dirname "$pidfile")"

  eval "dotenv_run $cmd &"
  child_pid=$!

  set +e
  echo "$child_pid" > "$pidfile"

  trap 'kill -TERM "$child_pid" 2>/dev/null' TERM INT

  wait "$child_pid"

  echo "[ $0 ] TERM or INT received, removing ${pidfile} and exiting"

  status=$?
  rm -f "$pidfile"
  exit "$status"
fi
