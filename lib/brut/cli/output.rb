# An `IO`-like class that provides user-helpful output, to be used in place of `puts`.  This is not strictly an `IO` and is intended to provide only a few options for sending output to a human.
#
# Command line apps that a human runs are often executed in the context of other apps or themselves spawn child processes.  Thus, it
# can be hard to know what output is coming from where.  This class addresses that by prefixing every line with the name of the
# command line app:
#
# ```
# > bin/my_app doit
# [ bin/my_app ] About to do sometohing
# Cannot connect to house
# [ bin/my_app ] Problem connecting
# ```
#
# The prefix allows the human to know what output was generated by the app they ran and what not.  This can be extremely helpful for
# debugging or just understanding what is going on.
class Brut::CLI::Output
  # Create a wrapper for the given IO that will use the given prefix
  #
  # @param [IO] io an IO where output should be sent, for example `$stdout`.
  # @param [String] prefix a prefix to be placed in front of all messages (unless a `_no_prefix` version is called)
  def initialize(io:, prefix:)
    @io          = io
    @prefix      = prefix
    @sync_status = @io.sync
  end

  # Calls `puts` without the prefix.  This is useful if the output is going to be obvious to the human user (e.g. CLI help), or if
  # it's intended to be piped into another app.
  #
  # @see https://ruby-doc.org/3.3.6/Kernel.html#method-i-puts
  def puts_no_prefix(*objects)
    @io.puts(*objects)
  end

  # Calls `puts`, adding a prefix to each of the objects in `*objects`.  This is useful for sending messages that a human may want to
  # read.
  #
  # @see https://ruby-doc.org/3.3.6/Kernel.html#method-i-puts
  def puts(*objects)
    if objects.empty?
      objects << ""
    end
    objects.each do |object|
      @io.puts(@prefix + object.to_s)
    end
    nil
  end

  # Calls `print` without any prefix.  In theory, this is the escape hatch to sending arbitrary data to the underlying `IO` without
  # expose said `IO`
  #
  # @see https://ruby-doc.org/3.3.6/Kernel.html#method-i-print
  def print(*objects)
    @io.print(*objects)
  end

  # Prints a string via `printf`, using the prefix.  This is useful for communciating to a human, but you need more power for
  # formatting than is afforded by {#puts}.
  #
  # @see https://ruby-doc.org/3.3.6/Kernel.html#method-i-printf
  def printf(format_string,*objects)
    @io.printf(@prefix + format_string,*objects)
  end

  # Prints a string via `printf`, without the prefix.
  #
  # @see https://ruby-doc.org/3.3.6/Kernel.html#method-i-printf
  def printf_no_prefix(format_string,*objects)
    @io.printf(format_string,*objects)
  end

  # Flush the underlying `IO`.
  def flush
    @io.flush
    self
  end
end
