#!/bin/bash

set -e

SCRIPT_DIR=$( cd -- "$( dirname -- "${0}" )" > /dev/null 2>&1 && pwd )

. "${SCRIPT_DIR}/dx.sh.lib"

require_command "docker"
load_docker_compose_env

usage_description="Execute a command inside the app's container. Any command other than 'bash' will be run with bash -lc. Use -B to just run the command directly. Use -A to avoid ssh-agent."
usage_args="[-s service] [-B] [-A] command"
usage_pre="exec.pre"
usage_on_help "${usage_description}" "${usage_args}" "${usage_pre}" "" "${@}"

SERVICE="${SERVICE_NAME:-${DEFAULT_SERVICE}}"
INCLUDE_PREFIX_FOR_NON_BASH=true
SSH_AGENT=true
while getopts "s:AB" opt "${@}"; do
  case ${opt} in
    s )
      SERVICE="${OPTARG}"
      ;;
    A )
      SSH_AGENT=false
      ;;
    B )
      INCLUDE_PREFIX_FOR_NON_BASH=false
      ;;
    \? )
      log "ðŸ›‘" "Unknown option: ${opt}"
      usage "${description}" "${usage_args}" "${usage_pre}"
      ;;
    : )
      log "ðŸ›‘" "Invalid option: ${opt} requires an argument"
      usage "${description}" "${usage_args}" "${usage_pre}"
      ;;
  esac
done
shift $((OPTIND -1))

if [ $# -eq 0 ]; then
  log "ðŸ›‘" "You must provide a command e.g. bash or ls -l"
  usage "${description}" "${usage_args}" "${usage_pre}"
fi

if ! exec_hook_if_exists "exec.pre"; then
  log "build.pre failed"
  exit 1
fi

if [ "$#" -eq 1 ] && [ "$1" = "bash" ]; then
  COMMAND=(bash)
elif [ "$INCLUDE_PREFIX_FOR_NON_BASH" = "true" ]; then
  COMMAND=(bash -lc "$*")
else
  COMMAND=("$@")
fi
if [ "$SSH_AGENT" = "true" ]; then
  COMMAND=(ssh-agent "${COMMAND[@]}")
fi

log "ðŸš‚" "Running '${COMMAND[@]}' inside container with service name '${SERVICE}'"

docker \
  compose \
    --file docker-compose.dx.yaml \
    --project-name "${PROJECT_NAME}" \
    --env-file "${ENV_FILE}" \
  exec \
    "${SERVICE}" \
    "${COMMAND[@]}"

# vim: ft=bash
