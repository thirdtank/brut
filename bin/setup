#!/usr/bin/env ruby

require_relative "bin_kit"
require "optparse"
require "pathname"
require "fileutils"

def setup(update_gems:,setup_credentials:)
  if update_gems
    log "Updating gems"
    system! "bundle update"
  else
    log "Installing gems"
    # Only do bundle install if the much-faster
    # bundle check indicates we need to
    system! "bundle check --no-color || bundle install --no-color --quiet"
  end

  log "Installing Ruby LSP"
  system! "gem install ruby-lsp"

  log "Installing JS/TS and CSS LSPs"
  system! "npm install -g typescript typescript-language-server vscode-langservers-extracted"

  project_root = Pathname($0).dirname / ".."
  if setup_credentials
    credentials_dir = project_root / "dx" / "credentials"
    if credentials_dir.exist?
      if credentials_dir.directory?
        log "#{credentials_dir} exists"
      else
        log "#{credentials_dir} is not a directory - please delete it or move it elsewhere and re-run this script"
        exit 1
      end
    else
      log "#{credentials_dir} doesn't exist - creating"
      FileUtils.mkdir_p credentials_dir
    end

    # https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=linux
    key_file = credentials_dir / "id_ed25519"

    if key_file.exist?
      log "#{key_file} exists already"
    else
      git_config_command = "git config --get user.email"
      email = `#{git_config_command}`.chomp
      if !$?.success?
        log "Could not determine your email via #{git_config_command} - is your git set up properly?"
        exit 1
      end
      log "Creating your key in #{key_file} using email #{email}."
      log "You will be prompted for a passphrase, which you are encouraged to provide"
      system! "ssh-keygen -t ed25519 -C #{email} -f \"#{key_file}\""
      log ""
      log "You must now add this to your GitHub profile in order to perform Git commands"
      log ""
      log "The key you just generated has a public key that should be available on your computer at"
      log ""
      log "   #{key_file.relative_path_from(project_root)}.pub"
      log ""
      log "Copy its contents and head to:"
      log ""
      log "   https://github.com/settings/keys"
      log ""
      log "Click 'New SSH key' and paste your key in, giving it a name like 'Brut Dev Env'"
      log ""
      log "(if this doesn't look right, check https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)"
      log ""
      log "Hit return when done"
      x = gets
    end

    log "Checking if ssh-agent has your SSH key"
    out,_err = capture!("ssh-keygen -lf #{key_file}")
    sha256 = out.split(/SHA256:/)[1].split(/\s+/)[0]
    command = "ssh-add -l | grep #{sha256} > /dev/null"
    log "Running '#{command}' to check"
    if system(command)
      log "SSH Key is in ssh agent"
    else
      log "Adding your SSH key to ssh-agent - you must provide your passphrase"
      system! "ssh-add #{key_file}"
    end

    known_hosts_dest = Pathname("/") / "home" / "appuser" / ".ssh" / "known_hosts"
    if known_hosts_dest.exist?
      log "#{known_hosts_dest} exists, your ssh key should work with GitHub"
    else
      log "#{known_hosts_dest} does not exist"
      known_hosts_source = credentials_dir / "known_hosts"
      if known_hosts_source.exist?
        log "#{known_hosts_source} exists - copying it to #{known_hosts_dest}"
        FileUtils.mkdir_p known_hosts_dest.dirname
        FileUtils.chmod(0700,known_hosts_dest.dirname)
        FileUtils.cp known_hosts_source, known_hosts_dest
        FileUtils.chmod(0600,known_hosts_dest)
      else
        log "#{known_hosts_source} also does not exist. To create it, we'll connect to github.com"
        log "NOTE: it will show you a fingerprint to verify authenticity. You should check it against:"
        log ""
        log "    https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints"
        log ""
        log "       and proceed ONLY if the values match"
        log ""
        system("ssh -T git@github.com") # NOT system! because this may exit nonzero but still have succeeded
        if $?.exitstatus == 255
          log "SOMETHING MAY HAVE GONE WRONG!"
        end
        if known_hosts_dest.exist?
          log "Copying #{known_hosts_dest} back to #{known_hosts_source} to use in the future"
          FileUtils.cp known_hosts_dest,known_hosts_source
        else
          log "For some reason #{known_hosts_dest} was not created.  Future ssh commands may ask you to verify GitHub's fingerprint"
        end
      end
    end
    log "Your ssh key looks good"

    gem_credentials_dest = Pathname("/") / "home" / "appuser" / ".gem" / "credentials"
    if gem_credentials_dest.exist?
      log "Gem credentials look good"
    else
      log "#{gem_credentials_dest} doesn't exist - creating"
      FileUtils.mkdir_p gem_credentials_dest.dirname
      gem_credentials_source = credentials_dir / "rubygems.credentials"
      if gem_credentials_source.exist?
        log "#{gem_credentials_source} exists - copying it to #{gem_credentials_dest}"
        FileUtils.cp gem_credentials_source,gem_credentials_dest
      else
        log "#{gem_credentials_source} must contain a RubyGems credentials file"
        log ""
        log "Follow the instructions here:"
        log ""
        log "   https://guides.rubygems.org/api-key-scopes/#creating-from-gem-cli"
        log ""
        log "Then copy ~/.gem/credentials into #{gem_credentials_source} and re-run this script"
        exit 1
      end
    end

    npm_credentials_dest = Pathname("/") / "home" / "appuser" / ".npmrc"
    if npm_credentials_dest.exist?
      log "NPM credentials look good"
    else
      log "#{npm_credentials_dest} doesn't exist - creating"
      FileUtils.mkdir_p npm_credentials_dest.dirname
      npm_credentials_source = credentials_dir / "npmrc"
      if npm_credentials_source.exist?
        log "#{npm_credentials_source} exists - copying it to #{npm_credentials_dest}"
        FileUtils.cp npm_credentials_source,npm_credentials_dest
      else
        log "#{npm_credentials_source} must contain an NPM credentials file"
        log ""
        log "If you don't have a ~/.npmrc file on your computer, create one:"
        log "  1. On your computer (not inside Docker), run this:"
        log ""
        log "     npm adduser"
        log ""
        log "  2. Then follow the instructions.  When it's done ~/.npmrc will have been created"
        log ""
        log "Copy ~/.npmrc into #{npm_credentials_source} and re-run this script"
        exit 1
      end
    end

    log "Setting up BrutJS"
    FileUtils.chdir project_root / "brut-js" do
      system! "bin/setup"
    end

    log "Setting up BrutCSS"
    FileUtils.chdir project_root / "brut-css" do
      system! "bin/setup"
    end

    log "Setting up mkbrut"
    FileUtils.chdir project_root / "mkbrut" do
      system! "bin/setup"
    end

    log "Setting up brutrb.com"
    FileUtils.chdir project_root / "brutrb.com" do
      system! "bin/setup"
    end

  else
    log "Not setting up GitHub or RubyGems credentials. You won't be able to push the gem"
  end
end


options = {
  update_gems: false,
  setup_credentials: true,
}
OptionParser.new do |opts|
  opts.on("--update-gems","Update gems get the latest versions consistent with Gemfile / gemspec.") do
    options[:update_gems] = true
  end
  opts.on("--no-credentials","If set, no GitHub or RubyGems credentials are required, but you can't push gems") do
    options[:setup_credentials] = false
  end
end.parse!

setup(**options)
