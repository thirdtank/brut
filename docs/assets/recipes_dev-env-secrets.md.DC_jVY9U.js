import{_ as s,c as i,o as a,ag as t}from"./chunks/framework.C4nOkCZI.js";const u=JSON.parse('{"title":"Managing Secrets in the Dev Environment","description":"","frontmatter":{},"headers":[],"relativePath":"recipes/dev-env-secrets.md","filePath":"recipes/dev-env-secrets.md"}'),o={name:"recipes/dev-env-secrets.md"};function n(r,e,h,l,c,d){return a(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="managing-secrets-in-the-dev-environment" tabindex="-1">Managing Secrets in the Dev Environment <a class="header-anchor" href="#managing-secrets-in-the-dev-environment" aria-label="Permalink to &quot;Managing Secrets in the Dev Environment&quot;">​</a></h1><p>Often, you need API keys like GitHub or Heroku tokens in order to perform development tasks. These should not be checked into version control, however you can still manage them.</p><h2 id="feature-api-keys" tabindex="-1">Feature - API Keys <a class="header-anchor" href="#feature-api-keys" aria-label="Permalink to &quot;Feature - API Keys&quot;">​</a></h2><ul><li>Developers need do use the Heroku command-line app inside the dev container.</li><li>Develoeprs do not want to have to perform a daily, browser-based authentication via <code>heroku auth:login</code></li></ul><h3 id="recipe" tabindex="-1">Recipe <a class="header-anchor" href="#recipe" aria-label="Permalink to &quot;Recipe&quot;">​</a></h3><p>The file <code>dx/bash_customizations.local</code> is set up for exactly this. It is not checked into version control (see your <code>.gitignore</code>), and it is included when the development environment is built.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dx/bash_customizations.local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HEROKU_API_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxxxxx</span></span></code></pre></div><p>When you change this file, you must rebuild your dev environment:</p><ol><li><code>Ctrl-C</code> wherever you ran <code>dx/start</code></li><li><code>dx/build</code></li><li><code>dx/start</code></li><li><code>dx/exec bash</code>, then <code>bin/setup</code>, then continue where you left off</li></ol><h4 id="how-this-works" tabindex="-1">How This Works <a class="header-anchor" href="#how-this-works" aria-label="Permalink to &quot;How This Works&quot;">​</a></h4><p>Here is a snippet of how this works. In the first <code>RUN</code> directlive, the non-root user is created. When that is completed, <code>~/.profile</code> and <code>~/.bashrc</code> are modified to source both <code>bash_customizations</code> (per-project customizations that should <strong>not</strong> contain secrets) and <code>bash_customizations.local</code>, which is the file we are discussing.</p><p>After that, the files are copied into the image via the <code>COPY</code> directives.</p><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Snippet from Dockerfile.dx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useradd --uid \${user_uid} --gid \${user_gid} --groups \${sadly_user_must_be_added_to_root}\${docker_gid} --create-home --home-dir /home/appuser appuser &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. ~/.bash_customizations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /home/appuser/.profile &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. ~/.bash_customizations.local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /home/appuser/.profile &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. ~/.bash_customizations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /home/appuser/.bashrc &amp;&amp; \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;. ~/.bash_customizations.local&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt; /home/appuser/.bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --chown=appuser:\${user_gid} dx/show-help-in-app-container-then-wait.sh /home/appuser</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --chown=appuser:\${user_gid} dx/bash_customizations /home/appuser/.bash_customizations</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --chown=appuser:\${user_gid} dx/bash_customizations.local /home/appuser/.bash_customizations.local</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>The resulting image <strong>will</strong> contain the secrets from <code>bash_customizations.local</code>, so it&#39;s <strong>very important</strong> you never push that image to a regsitry.</p></div><h2 id="feature-ssh-keys" tabindex="-1">Feature - SSH Keys <a class="header-anchor" href="#feature-ssh-keys" aria-label="Permalink to &quot;Feature - SSH Keys&quot;">​</a></h2><ul><li>You need an SSH key in order to push to GitHub from the dev container</li><li>You do not want to creata new key every time</li></ul><h3 id="recipe-1" tabindex="-1">Recipe <a class="header-anchor" href="#recipe-1" aria-label="Permalink to &quot;Recipe&quot;">​</a></h3><p>Ultimately, you want the SSH key to be copied into the container and set up as if you&#39;d created the key there. The recipe below is an example of how you could do this, and should demonstrate the various seams in Brut&#39;s dev environment to allow you to craft it how you like.</p><ol><li><p>Choose a directory in the project where each developer will store their keys. <strong>This directory should be excluded from version control</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir dx/credentials</span></span>
<span class="line"><span>echo &quot;/dx/credetials&quot; &gt;&gt; .gitignore</span></span></code></pre></div></li><li><p>Assuming you create an SSH key already, place <code>id_ed25519</code> (private key) and <code>id_ed25519.pub</code> (public key) into <code>dx/credentials</code>.</p></li><li><p>Create <code>dx/credentials/known_hosts</code> using <code>id_ed25519.pub</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>github.com ssh-ed25519 «key from id_ed25519.pub here»</span></span></code></pre></div></li><li><p>Your dev container will have access to <code>dx/credentials</code> already, so you can use <code>bin/setup</code> to copy them to the right place. How you do this depends on how complicated you want to get. You can examine Brut&#39;s <code>bin/setup</code> to see how it manages it. You will see that ti uses <code>ssh-agent</code> to avoid requiring the passcode every time, and that it uses <code>chmod</code> to make sure the SSH directories are the right permissions.</p></li></ol><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>The resulting image <strong>will</strong> contain your SSH key, so it&#39;s <strong>very important</strong> you never push that image to a regsitry.</p></div><p>This recipe is scant on details, since each credential is highly specific. The key points to know are that you can store information in the project, but not checked in, then rely on that information being available to <code>bin/setup</code> inside the container.</p>`,21)])])}const k=s(o,[["render",n]]);export{u as __pageData,k as default};
