import{_ as e,c as i,o as a,ag as t}from"./chunks/framework.C4nOkCZI.js";const k=JSON.parse('{"title":"Background Jobs","description":"","frontmatter":{},"headers":[],"relativePath":"jobs.md","filePath":"jobs.md"}'),n={name:"jobs.md"};function o(p,s,l,d,h,r){return a(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="background-jobs" tabindex="-1">Background Jobs <a class="header-anchor" href="#background-jobs" aria-label="Permalink to &quot;Background Jobs&quot;">​</a></h1><p>Brut ships without any background job system, however it should work with any system you&#39;d like to use. Brut can install/configure Sidekiq for you, however you are expected to understand Sidekiq in order to use it.</p><h2 id="setting-up-sidekiq" tabindex="-1">Setting up Sidekiq <a class="header-anchor" href="#setting-up-sidekiq" aria-label="Permalink to &quot;Setting up Sidekiq&quot;">​</a></h2><p>Brut&#39;s code-generation system used for installing capabilities are called <em>segments</em>, and Brut provides a Sidekiq segment you can use to get an initial working setup of Sidekiq in your Brut app.</p><h3 id="adding-the-segment" tabindex="-1">Adding the Segment <a class="header-anchor" href="#adding-the-segment" aria-label="Permalink to &quot;Adding the Segment&quot;">​</a></h3><ol><li><p>Ensure your project files are all committed. This is so you can easily see (and, if needed, undo) the changes <code>mkbrut</code> will make.</p></li><li><p>Use <code>mkbrut</code> to add the segment:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run \\</span></span>
<span class="line"><span>       --pull always \\</span></span>
<span class="line"><span>       -v &quot;$PWD&quot;:&quot;$PWD&quot; \\</span></span>
<span class="line"><span>       -w &quot;$PWD&quot; \\</span></span>
<span class="line"><span>       -u $(id -u):$(id -g) \\</span></span>
<span class="line"><span>       -it \\</span></span>
<span class="line"><span>       thirdtank/mkbrut \\</span></span>
<span class="line"><span>       mkbrut add-segment -r /path/to/your/project sidekiq</span></span></code></pre></div></li><li><p>This will modify and create various files in your project. Check them out if you like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; git status</span></span></code></pre></div></li><li><p>Exit your dev environment (i.e. hit <code>Ctrl-C</code> wherever you ran <code>dx/start</code>).</p></li><li><p>Rebuild and restart your dev environment. This may take a moment, since Valkey will be downloaded.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>your-computer&gt; dx/build</span></span>
<span class="line"><span>your-computer&gt; dx/start</span></span></code></pre></div></li><li><p>In another Terminal, connect to your dev container and run <code>bin/setup</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>your-computer&gt; dx/exec bash</span></span>
<span class="line"><span>devcontainer&gt; bin/setup</span></span></code></pre></div></li><li><p>The segment provides an integration test that will use the actual Sidekiq server and client, running against the actual Valkey database that was installed:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>devcontainer&gt; bin/test e2e specs/integration/sidekiq_works.spec.rb</span></span></code></pre></div></li></ol><p>If this test passes, you are ready to go.</p><h3 id="using-sidekiq-in-brut" tabindex="-1">Using Sidekiq in Brut <a class="header-anchor" href="#using-sidekiq-in-brut" aria-label="Permalink to &quot;Using Sidekiq in Brut&quot;">​</a></h3><p>Jobs live in <code>app/src/back_end/jobs</code>, however this is just a convention and is not enforced - you can place a job anywhere that Zeitwerk will find the class. Brut also provides basic configuration and a base job.</p><table tabindex="0"><thead><tr><th>File</th><th>Purpose</th></tr></thead><tbody><tr><td><code>app/config/sidekiq.yml</code></td><td>Standard configuration for Sidekiq</td></tr><tr><td><code>app/src/back-end/jobs/app_job.r</code></td><td>Base class for your jobs that includes <code>Sidekiq::Job</code></td></tr><tr><td><code>app/src/back-end/segments/sidekiq_segment.rb</code></td><td>Initial client and server configuration for Sidekiq (that you can&#39;t do with <code>sidekiq.yml</code>. This sets up basic observability for your jobs</td></tr></tbody></table><h3 id="accessing-the-web-ui" tabindex="-1">Accessing the Web UI <a class="header-anchor" href="#accessing-the-web-ui" aria-label="Permalink to &quot;Accessing the Web UI&quot;">​</a></h3><p>The Sidekiq segment mounts the Sidekiq Web UI to your app inside <code>config.ru</code>:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sidekiq&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  use </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sidekiq&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |username, password|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [username, password] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SIDEKIQ_BASIC_AUTH_USER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SIDEKIQ_BASIC_AUTH_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  run </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Sidekiq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ...</span></span></code></pre></div><p>Values for <code>SIDEKIQ_BASIC_AUTH_USER</code> and <code>SIDEKIQ_BASIC_AUTH_PASSWORD</code> for dev and test are placed into <code>.env.development</code> and <code>.env.test</code>, respectively. You must provide these values for production, based on however you are managing environment variables.</p><p>Once you start the app, navigat to <code>http://localhost:6502/sidekiq</code> and enter the username/password from <code>.env.development</code>. You should see the web UI.</p><h3 id="deploying-with-the-heroku-segment" tabindex="-1">Deploying with The Heroku Segment <a class="header-anchor" href="#deploying-with-the-heroku-segment" aria-label="Permalink to &quot;Deploying with The Heroku Segment&quot;">​</a></h3><p>If you have set up <a href="/deployment.html#heroku-container-based-deployment">Heroku Container-based Deployment</a>, you may need to modify <code>deploy/heroku_config.rb</code>. The Sidekiq segement should have edited this, however if you installed the Heroku segment after setting up Sidekiq, you&#39;ll need to add to the file:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HerokuConfig</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self.additional_images</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;sidekiq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        cmd:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bin/run sidekiq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="setting-up-other-job-systems" tabindex="-1">Setting Up Other Job Systems <a class="header-anchor" href="#setting-up-other-job-systems" aria-label="Permalink to &quot;Setting Up Other Job Systems&quot;">​</a></h2><p>To use another job system, you&#39;ll likely want to start with <code>app/src/app.rb</code>. You can place all your initialize code in <code>#boot!</code> to get things working, then factor it out from there. <code>App</code>, the class in that file, is a normal class, so you can extract your setup to other normal classes and bring them in as you would in any other Ruby app.</p><p>Just note that <code>App</code>&#39;s <code>initialize</code> method should avoid making network connections, so while you are safe to create objects and configuration here, do not connect to databases or anything like that. You <em>can</em> do that inside <code>boot!</code>.</p>`,21)])])}const u=e(n,[["render",o]]);export{k as __pageData,u as default};
