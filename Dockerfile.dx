FROM ruby:3.4

SHELL [ "/bin/bash", "-o", "pipefail", "-c" ]

ENV DEBIAN_FRONTEND=noninteractive

# Install Docker itself. Note that this is installed only what is needed to run
# the Docker CLI - the docker-compose.dx.yml will connect this docker's socket
# to the one on the host. This is only to run stuff like docker build and docker push.
# It's NOT intended to run docker containers inside this one.
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg  && \
    echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update --quiet --yes && \
    apt-get install --quiet --yes docker-ce \
                       docker-ce-cli \
                       containerd.io \
                       docker-buildx-plugin \
                       docker-compose-plugin


# These packages are needed to set up other repos to install other
# packages and/or are useful in installing other software
RUN apt-get -y clean && \
    apt-get -y update && \
    apt-get install --quiet --yes ca-certificates curl gnupg rsync

RUN echo "gem: --no-document" >> ~/.gemrc && \
    gem update --system && \
    gem install bundler
# Need vim at all times
ENV EDITOR=vim
RUN apt-get install -y vim && \
    echo "set -o vi" >> /root/.bashrc

# Install NodeJS
COPY --from=node:22-slim /usr/local /usr/local


# Setup a non-root user

# Their user id, which ideally matches their user id on the host
ARG user_uid=10001
# Their group id, which ideally matches their group id on the host
ARG user_gid=10002
# The group id that can access /var/run/docker.sock on the host.
# If this isn't mapped properly, no docker-out-of-docker commands will work
ARG docker_gid=10003
# Can be set to ',0' in order to add the user to roo's group
ARG sadly_user_must_be_added_to_root=

# Create the user's group ID if it does not exist
RUN getent group ${user_gid} || groupadd --gid ${user_gid} appgroup
# Create the docker group id if it does not exist
RUN getent group ${docker_gid} || groupadd --gid ${docker_gid} hostdocker
# Create the user. Note that we put bash_customizations in both .profile and .bashrc
# to increase the chances they are used when running bash in various configurations
RUN useradd --uid ${user_uid} --gid ${user_gid} --groups ${sadly_user_must_be_added_to_root}${docker_gid} --create-home --home-dir /home/appuser appuser && \
    echo ". ~/.bash_customizations" >> /home/appuser/.profile && \
    echo ". ~/.bash_customizations.local" >> /home/appuser/.profile && \
    echo ". ~/.bash_customizations" >> /home/appuser/.bashrc && \
    echo ". ~/.bash_customizations.local" >> /home/appuser/.bashrc

COPY --chown=appuser:${user_gid} dx/show-help-in-app-container-then-wait.sh /home/appuser
COPY --chown=appuser:${user_gid} dx/bash_customizations /home/appuser/.bash_customizations
COPY --chown=appuser:${user_gid} dx/bash_customizations.local /home/appuser/.bash_customizations.local

# NOT including the group here as that will place the user's environment
# ONLY in that group and not in all the groups in which they are a part.
USER appuser

# Node's colors are hand-crafted to always look bad and render at least some text unreadable 
# no matter what your setup. Cool.
ENV NODE_DISABLE_COLORS=1

# This entrypoint produces a nice help message and waits around for you to do
# something with the container.
COPY dx/show-help-in-app-container-then-wait.sh /root
